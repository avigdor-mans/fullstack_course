{"version":3,"sources":["types.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddEntryModal/FormField.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","constants.ts","EntryDetails/HealthCheck.tsx","EntryDetails/Hospital.tsx","EntryDetails/OccupationalHealthcare.tsx","EntryDetails/index.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","setPatients","patients","type","payload","setPatient","patient","setDiagnosis","diagnosis","addEntry","entry","initialState","StateContext","createContext","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","EntryType","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","React","useState","setModalOpen","setError","closeModal","undefined","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","id","Cell","to","a","async","axios","post","newPatient","data","console","response","HealthCheck","date","Icon","description","healthCheckRating","Hospital","OccupationalHealthcare","employerName","EntryDetails","TypeSelectField","onChange","e","CustomEvent","HealthCheckRatingSelectField","DiagnosisSelection","diagnoses","setFieldValue","setFieldTouched","stateOptions","code","text","Dropdown","fluid","multiple","search","selection","_event","typeOptions","Health","Hospit","Occup","healthCheckRatingOptions","CriticalRisk","HighRisk","LowRisk","Healthy","AddEntryForm","form","setForm","setType","corectField","c","preventDefault","target","specialist","diagnosisCodes","dischargeDate","dischargeCriteria","startDate","endDate","validateOnChange","requiredError","AddEntryModal","PatientPage","useParams","iconName","get","patientFromApi","fetchPatient","size","entries","log","d","updatePatient","sickLeave","discharge","criteria","App","useEffect","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnosis","Link","primary","Divider","hidden","path","render","ReactDOM","reducer","children","useReducer","state","Provider","action","reduce","memo","diagnos","concat","document","getElementById"],"mappings":"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","file":"static/js/main.5d5ca786.chunk.js","sourcesContent":["//typs & interfaces\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\nexport type PublicPatient = Omit<Patient, 'ssn' | 'entries' >;\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  \"Healthy\" = 0,\n  \"LowRisk\" = 1,\n  \"HighRisk\" = 2,\n  \"CriticalRisk\" = 3\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: \"HealthCheck\";\n  healthCheckRating: HealthCheckRating;\n}\n\nexport interface Discharge {\n  date:string;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge:Discharge;\n}\n\nexport interface SickLeave {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type:\"OccupationalHealthcare\";\n  employerName: string;\n  sickLeave?: SickLeave;\n}\n\nexport type Entry = \n| HospitalEntry\n| OccupationalHealthcareEntry\n| HealthCheckEntry;\n\nexport type EntryForm = Omit<HospitalEntry, 'id'> | Omit<OccupationalHealthcareEntry, 'id'> | Omit<HospitalEntry, 'id'>;\n","import { State } from \"./state\";\nimport { Patient, Diagnosis, Entry } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_PATIENT_PAGE\";\n      payload: Patient;\n    }\n  | {\n    type: \"SET_DIAGNOSIS_LIST\";\n    payload: Diagnosis[];\n  }\n  | {\n    type: \"ADD_ENTRY\";\n    payload: Entry;\n  };\n\nexport const setPatients = (patients:Patient[]):Action => {\n  return({\n    type: \"SET_PATIENT_LIST\",\n    payload:patients\n  });\n};\n\nexport const setPatient = (patient:Patient):Action => {\n  return({\n    type: \"SET_PATIENT_PAGE\",\n    payload:patient\n  });\n};\n\nexport const addPatient = (patient:Patient):Action => {\n  return({\n    type: \"ADD_PATIENT\",\n    payload:patient\n  });\n};\n\nexport const setDiagnosis = (diagnosis:Diagnosis[]):Action => {\n  return({\n    type: \"SET_DIAGNOSIS_LIST\",\n    payload: diagnosis\n  });\n};\n\nexport const addEntry = (entry:Entry):Action => {\n  return({\n    type: \"ADD_ENTRY\",\n    payload:entry\n  })\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_PATIENT_PAGE\":\n      return {\n        ...state,\n        patient: action.payload\n      };\n    case \"SET_DIAGNOSIS_LIST\":\n      return{\n        ...state,\n        diagnosis: {\n          ...action.payload.reduce(\n            (memo, diagnos) => ({ ...memo, [diagnos.code]: diagnos }),\n            {}\n          ),\n          ...state.diagnosis\n        }\n      }\n    case \"ADD_ENTRY\":\n      return{\n        ...state,\n        patient: state.patient ? {\n          ...state.patient,\n          entries: state.patient.entries.concat(action.payload)\n        }\n        : undefined\n      }\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnosis: { [code: string]: Diagnosis}\n  patient?: Patient;\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnosis: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, HealthCheckRating, HospitalEntry, OccupationalHealthcareEntry, SickLeave } from \"../types\";\r\n\r\nexport interface Values {\r\n  date: string,\r\n  type: EntryType,\r\n  specialist: string,\r\n  diagnosisCodes: Array<Diagnosis['code']>,\r\n  description: string,\r\n  dischargeDate?:string;\r\n  dischargeCriteria?: string;\r\n  employerName?: string,\r\n  startDate?: string;\r\n  endDate?: string;\r\n  healthCheckRating?: HealthCheckRating \r\n}\r\n\r\nexport enum EntryType {\r\n  Health = \"HealthCheck\",\r\n  Occup = \"OccupationalHealthcare\",\r\n  Hospit = \"Hospital\"\r\n}\r\nexport type HealthCheckRatingOption = {\r\n  value: HealthCheckRating;\r\n  label: number;\r\n};\r\n\r\nexport type TypeOption = {\r\n  value: EntryType;\r\n  label: string;\r\n};\r\n\r\nexport type EntryForm = Omit<HospitalEntry, 'id'> | Omit<OccupationalHealthcareEntry, 'id'> | Omit<HospitalEntry, 'id'>;\r\n\r\n// props for select field component\r\nexport type TypeSelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: TypeOption[];\r\n  onChange: (x:{ target: { value: EntryType; }; }, y:CustomEvent) => void;\r\n};\r\n\r\nexport const TypeSelectField: React.FC<TypeSelectFieldProps> = ({\r\n  name,\r\n  label,\r\n  options,\r\n  onChange\r\n}: TypeSelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\" \r\n    onClick={(e: { target: { value: EntryType; }; })=> onChange(e, new CustomEvent(\"nothing\"))}\r\n    >\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\nexport type HealthCheckRatingSelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: HealthCheckRatingOption[];\r\n};\r\n\r\nexport const HealthCheckRatingSelectField: React.FC<HealthCheckRatingSelectFieldProps> = ({\r\n  name,\r\n  label,\r\n  options,\r\n}: HealthCheckRatingSelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\" >\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\nimport { Link } from \"react-router-dom\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","export const apiBaseUrl = '/api/';\n","import React from \"react\";\r\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport { HealthCheckEntry } from \"../types\";\r\n\r\nconst HealthCheck: React.FC<{ entry: HealthCheckEntry }> = ({entry}) => {\r\n  const heartColoring =  ():\"green\" | \"yellow\" | \"orange\" | \"red\" => \r\n    entry.healthCheckRating === 0 ? \"green\" :\r\n    entry.healthCheckRating === 1 ? \"yellow\" :\r\n    entry.healthCheckRating === 2 ? \"orange\" :\r\n    \"orange\";\r\n\r\n  return(\r\n    <Segment>\r\n      <Header as=\"h3\">{entry.date} <Icon name=\"doctor\" /></Header>\r\n      <p>{entry.description}</p>\r\n      <Icon name=\"heart\" color={heartColoring()} />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default HealthCheck;","import React from \"react\";\r\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport { HospitalEntry } from \"../types\";\r\n\r\nconst Hospital: React.FC<{ entry: HospitalEntry }> = ({entry}) => {\r\n \r\n  return(\r\n    <Segment>\r\n      <Header as=\"h3\">{entry.date} <Icon name=\"hospital\" /></Header>\r\n      <p>{entry.description}</p>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default Hospital;","import React from \"react\";\r\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport { OccupationalHealthcareEntry } from \"../types\";\r\n\r\nconst OccupationalHealthcare: React.FC<{ entry: OccupationalHealthcareEntry }> = ({entry}) => {\r\n  return(\r\n    <Segment>\r\n      <Header as=\"h3\">{entry.date} <Icon name=\"stethoscope\" />{entry.employerName}</Header>\r\n      <p>{entry.description}</p>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default OccupationalHealthcare;","import React from \"react\";\r\nimport { Entry } from \"../types\";\r\nimport HealthCheck from \"./HealthCheck\";\r\nimport Hospital from \"./Hospital\";\r\nimport OccupationalHealthcare from \"./OccupationalHealthcare\";\r\n\r\nconst EntryDetails:  React.FC<{entry: Entry}> = ({entry}) => {\r\n  switch (entry.type) {\r\n    case \"HealthCheck\":\r\n      return (<HealthCheck entry={entry} />);\r\n    case \"Hospital\":\r\n      return (<Hospital entry={entry} />);\r\n    case \"OccupationalHealthcare\":\r\n      return (<OccupationalHealthcare entry={entry} />);\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default EntryDetails","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { HealthCheckRating } from \"../types\";\r\nimport { TypeOption, EntryType, TextField, DiagnosisSelection, Values, HealthCheckRatingOption, TypeSelectField, HealthCheckRatingSelectField, HealthCheckRatingSelectFieldProps, TypeSelectFieldProps } from \"./FormField\";\r\nimport { useStateValue } from \"../state\";\r\n\r\ninterface Props {\r\n  onSubmit: (values: Values) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst typeOptions: TypeOption[] = [\r\n  { value: EntryType.Health, label: \"HealthCheck\" },\r\n  { value: EntryType.Hospit, label: \"Hospital\" },\r\n  { value: EntryType.Occup, label: \"OccupationalHealthcare\" }\r\n];\r\n\r\nconst healthCheckRatingOptions: HealthCheckRatingOption[] = [\r\n  { value: HealthCheckRating.CriticalRisk, label: 3 },\r\n  { value: HealthCheckRating.HighRisk, label: 2 },\r\n  { value: HealthCheckRating.LowRisk, label: 1 },\r\n  { value: HealthCheckRating.Healthy, label: 0 },\r\n];\r\ntype AllProps = HealthCheckRatingSelectFieldProps | TypeSelectFieldProps;\r\nconst AddEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n\r\n  const [{ diagnosis }] = useStateValue();\r\n  const [form, setForm] = React.useState<JSX.Element|null>(\r\n    <HealthCheckRatingSelectField\r\n      label=\"HealthCheckRating\"\r\n      name=\"healthCheckRating\"\r\n      options={healthCheckRatingOptions}\r\n    />\r\n  );\r\n  const [type, setType] = React.useState(EntryType.Health)\r\n  \r\n  const corectField = (e:{ target: { value: EntryType; }; }, c:CustomEvent) => {\r\n    c.preventDefault();\r\n    setType(e.target.value);\r\n    switch (e.target.value) {\r\n      case \"HealthCheck\":\r\n        setForm (\r\n        <HealthCheckRatingSelectField\r\n          label=\"HealthCheckRating\"\r\n          name=\"healthCheckRating\"\r\n          options={healthCheckRatingOptions}\r\n        />);\r\n        break;\r\n      case \"Hospital\":\r\n        setForm (\r\n          <div>\r\n            <Field\r\n              label=\"DischargeDate\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dischargeDate\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"DischargeCriteria\"\r\n              placeholder=\"Discharge Criteria\"\r\n              name=\"dischargeCriteria\"\r\n              component={TextField}\r\n            />   \r\n          </div>\r\n        );\r\n        break;\r\n      case \"OccupationalHealthcare\":\r\n        setForm (\r\n          <div>\r\n            <Field\r\n              label=\"EmployerName\"\r\n              placeholder=\"employerName\"\r\n              name=\"employerName\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"StartDate\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"startDate\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"EndDate\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"endDate\"\r\n              component={TextField}\r\n            />   \r\n          </div>\r\n        );\r\n        break;\r\n      default:\r\n        setForm(null);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Formik\r\n      initialValues={{\r\n        type: type,\r\n        date: \"\",\r\n        specialist: \"\",\r\n        diagnosisCodes: [],\r\n        description: \"\",\r\n        dischargeDate: \"\",\r\n        dischargeCriteria: \"\",\r\n        employerName: \"\",\r\n        startDate: \"\",\r\n        endDate: \"\",\r\n        healthCheckRating: HealthCheckRating.Healthy\r\n      }}\r\n      validateOnChange\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.date) {\r\n          errors.date = requiredError;\r\n        }\r\n        if (!values.specialist) {\r\n          errors.specialist = requiredError;\r\n        }\r\n        if (!values.description) {\r\n          errors.description = requiredError;\r\n        }\r\n        if(values.type===EntryType.Hospit &&  !values.dischargeDate){\r\n          errors.dischargeDate = requiredError;\r\n        }\r\n        if(values.type===EntryType.Hospit &&  !values.dischargeCriteria){\r\n          errors.dischargeCriteria = requiredError;\r\n        }\r\n        if(values.type===EntryType.Occup &&  !values.employerName){\r\n          errors.employerName = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty, setFieldValue, setFieldTouched  }) => {\r\n        return(\r\n          <Form className=\"form ui\">\r\n            \r\n            <TypeSelectField\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              options={typeOptions}\r\n              onChange={corectField}\r\n            />\r\n            <Field\r\n              label=\"Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <DiagnosisSelection\r\n            setFieldValue={setFieldValue}\r\n            setFieldTouched={setFieldTouched}\r\n            diagnoses={Object.values(diagnosis)}\r\n            />\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              component={TextField}\r\n            />\r\n            {form}\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEntryForm;","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddEntryForm from './AddEntryForm';\r\nimport { Values } from './FormField';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: Values) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddEntryModal;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Diagnosis, Entry, Patient } from \"../types\";\r\nimport { useStateValue, setPatient, addEntry } from \"../state\";\r\nimport { apiBaseUrl } from \"../constants\";\r\n\r\nimport { Button, Container, Header, Icon } from \"semantic-ui-react\";\r\nimport EntryDetails from \"../EntryDetails\";\r\nimport AddEntryModal from \"../AddEntryModal\";\r\nimport { Values } from \"../AddEntryModal/FormField\";\r\n\r\nconst PatientPage: React.FC = () => {\r\n  const [{ patient, diagnosis }, dispatch] = useStateValue();\r\n  const { id } = useParams<{ id: string }>();\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n\r\n  const submitNewEntry = async (values: Values) => {\r\n    console.log(values);\r\n    switch (values.type) {\r\n      case \"HealthCheck\":\r\n        try {\r\n          const { data: updatePatient } = await axios.post<Entry>(\r\n            `${apiBaseUrl}patients/${id}/entries`,\r\n            {\r\n              type: values.type,\r\n              description: values.description,\r\n              date: values.date,\r\n              specialist: values.specialist,\r\n              diagnosisCodes: values.diagnosisCodes.map((d) => diagnosis[d]),\r\n              healthCheckRating: values.healthCheckRating\r\n            }\r\n          );\r\n          dispatch(addEntry(updatePatient));\r\n          closeModal();\r\n          break;\r\n        } catch (e) {\r\n          console.error(e.response.data);\r\n          setError(e.response.data.error);\r\n          break;\r\n        }\r\n      case \"OccupationalHealthcare\":\r\n        try {\r\n          const { data: updatePatient } = await axios.post<Entry>(\r\n            `${apiBaseUrl}patients/${id}/entries`,\r\n            {\r\n              type: values.type,\r\n              description: values.description,\r\n              date: values.date,\r\n              specialist: values.specialist,\r\n              diagnosisCodes: values.diagnosisCodes.map((d) => diagnosis[d]),\r\n              employerName: values.employerName,\r\n              sickLeave: {\r\n                startDate: values.startDate,\r\n                endDate: values.endDate\r\n              }\r\n            }\r\n          );\r\n          dispatch(addEntry(updatePatient));\r\n          closeModal();\r\n          break;\r\n        } catch (e) {\r\n          console.error(e.response.data);\r\n          setError(e.response.data.error);\r\n          break;\r\n        }\r\n      case \"Hospital\":\r\n        try {\r\n          const { data: updatePatient } = await axios.post<Entry>(\r\n            `${apiBaseUrl}patients/${id}/entries`,\r\n            {\r\n              type: \"Hospital\",\r\n              description: values.description,\r\n              date: values.date,\r\n              specialist: values.specialist,\r\n              diagnosisCodes: values.diagnosisCodes.map((d) => diagnosis[d]),\r\n              discharge: {\r\n                date: values.dischargeDate,\r\n                criteria: values.dischargeCriteria\r\n              }\r\n            }\r\n          );\r\n          dispatch(addEntry(updatePatient));\r\n          closeModal();\r\n          break;\r\n        } catch (e) {\r\n          console.error(e.response.data);\r\n          setError(e.response.data.error);\r\n          break;\r\n        }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  \r\n  const iconName = \r\n    patient?.gender==='male' ? 'mars' :\r\n      patient?.gender==='female' ? 'venus':\r\n      'genderless';\r\n  \r\n\r\n  if(!patient || patient.id!==id){\r\n    const fetchPatient = async () => {\r\n      try{\r\n        const { data: patientFromApi } = await axios.get<Patient>(\r\n          `${apiBaseUrl}patients/${id}`\r\n        );\r\n        dispatch(setPatient(patientFromApi));\r\n      }catch(e){\r\n        console.error(e.response);\r\n      }\r\n    };\r\n    fetchPatient();\r\n  }  \r\n  \r\n  if(!patient){\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n      <Container>\r\n        <Header as=\"h2\">{patient?.name} <Icon name={iconName} size='big'/></Header>\r\n        <p>ssh: {patient.ssn}</p>\r\n        <p>occupation: {patient.occupation}</p>\r\n        <br/>\r\n        <Header as=\"h3\">entries</Header>\r\n        {patient.entries.map((e) => \r\n          <EntryDetails entry={e} />\r\n        )}\r\n        <AddEntryModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewEntry}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n        <Button onClick={() => openModal()}>Add New Entry</Button>\r\n      </Container>\r\n  );\r\n};\r\n\r\nexport default PatientPage;","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatients, setDiagnosis } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport PatientPage from \"./PatientPage\";\n\nconst App: React.FC = () => {\n  const [{patients, patient, diagnosis}, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}patients`\n        );\n        dispatch(setPatients(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    const fetchDiagnosis = async () => {\n      try {\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}diagnosis`\n        );\n        dispatch(setDiagnosis(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }      \n    };\n    fetchDiagnosis();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/:id\" render={()=> <PatientPage />}/>\n            <Route path=\"/\" render={() => <PatientListPage />} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}